<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ assembly name="$(SolutionDir)Smartiz3.Data\bin\Debug\Smartiz3.Data.dll" #>
<#@ import namespace="Smartiz3.Data" #>
// By Mohammad Dayyan
<#
var manager = Manager.Create(Host, GenerationEnvironment);
var @namespace = "Smartiz3.Data";

var assembly = typeof(Smartiz3.Data.Color).Assembly;
var allEntityTypes = assembly.GetTypes().Where(t => t.IsClass && t.Namespace == @namespace).ToArray();
var compiler = new CSharpCodeProvider();
foreach (Type entity in allEntityTypes)
{
	var properties = entity.GetProperties(BindingFlags.Public|BindingFlags.Instance);
	manager.StartNewFile(entity.Name + "Dto.cs");
	#>
using System;
using System.Collections.Generic;

namespace Smartiz3.Dto
{
	public class <#= entity.Name #>Dto : BaseDto
    {
<#
foreach (PropertyInfo property in properties)
{
	var propertyType = compiler.GetTypeOutput(new CodeTypeReference(property.PropertyType));
	if (propertyType.IndexOf("Collection") > -1) {
		propertyType = "List<" + propertyType.Remove(0, propertyType.LastIndexOf("<") + 1);
		propertyType = propertyType.Replace("Smartiz3.Data.", "").Replace(">", "") + "Dto>";
	}
	if (propertyType.IndexOf("Smartiz3.Data.") > -1 && propertyType.IndexOf(">") <= -1)
		propertyType = propertyType.Replace("Smartiz3.Data.", "") + "Dto";
	else if (Nullable.GetUnderlyingType(property.PropertyType) != null)
		propertyType = compiler.GetTypeOutput(new CodeTypeReference(Nullable.GetUnderlyingType(property.PropertyType))) + "?";
	if (propertyType.IndexOf(".") > -1)
		propertyType = propertyType.Remove(0, propertyType.LastIndexOf(".") + 1);
#>
		public  <#= propertyType #> <#= property.Name #> { get; set; }
<#
}
#>
    }
}<#
	manager.EndBlock();
}

#>
<# manager.Process(true); #>
